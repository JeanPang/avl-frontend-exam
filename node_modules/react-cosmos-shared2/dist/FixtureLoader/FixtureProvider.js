"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixtureProvider = FixtureProvider;

var _react = _interopRequireDefault(require("react"));

var _react2 = require("../react");

var _FixtureContext = require("./FixtureContext");

var _getDecoratedFixtureElement = require("./getDecoratedFixtureElement");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function FixtureProvider(_ref) {
  var fixtureId = _ref.fixtureId,
      fixture = _ref.fixture,
      systemDecorators = _ref.systemDecorators,
      userDecorators = _ref.userDecorators,
      fixtureState = _ref.fixtureState,
      setFixtureState = _ref.setFixtureState,
      onErrorReset = _ref.onErrorReset;

  // Prevent unintentional renders https://reactjs.org/docs/context.html#caveats
  var contextValue = _react.default.useMemo(function () {
    return {
      fixtureState: fixtureState,
      setFixtureState: setFixtureState
    };
  }, [fixtureState, setFixtureState]);

  var decoratorProps = _react.default.useMemo(function () {
    return {
      fixtureState: fixtureState,
      setFixtureState: setFixtureState,
      onErrorReset: onErrorReset
    };
  }, [fixtureState, onErrorReset, setFixtureState]);

  var decorators = _react.default.useMemo(function () {
    return mergeDecorators(fixtureId, systemDecorators, userDecorators);
  }, [fixtureId, systemDecorators, userDecorators]);

  var decoratedFixture = _react.default.useMemo(function () {
    return (0, _getDecoratedFixtureElement.getDecoratedFixtureElement)(fixture, decorators, decoratorProps);
  }, [decoratorProps, decorators, fixture]);

  return _react.default.createElement(_FixtureContext.FixtureContext.Provider, {
    value: contextValue
  }, decoratedFixture);
}

function mergeDecorators(fixtureId, systemDecorators, userDecorators) {
  return [].concat(_toConsumableArray(systemDecorators), _toConsumableArray((0, _react2.getSortedDecoratorsForFixturePath)(fixtureId.path, userDecorators)));
}