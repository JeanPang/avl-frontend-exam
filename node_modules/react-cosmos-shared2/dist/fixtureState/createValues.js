"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createValues = createValues;
exports.createValue = createValue;

var _reactElementToJsxString = _interopRequireDefault(require("react-element-to-jsx-string"));

var _reactIs = require("react-is");

var _shared = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createValues(obj) {
  var values = {};
  Object.keys(obj) // Ignore noise from attrs defined as undefined (eg. props.children is
  // often `undefined` if element has no children)
  .filter(function (key) {
    return obj[key] !== undefined;
  }).forEach(function (key) {
    values[key] = createValue(obj[key]);
  });
  return values;
}

function createValue(value) {
  if ((0, _shared.isPrimitiveValue)(value)) {
    return {
      type: 'primitive',
      value: value
    };
  }

  if ((0, _shared.isArray)(value)) {
    return {
      type: 'array',
      values: value.map(function (v) {
        return createValue(v);
      })
    };
  }

  if ((0, _shared.isObject)(value)) {
    return {
      type: 'object',
      values: createValues(value)
    };
  } // Why store unserializable values in fixture state?
  // - Because they still provides value in the Cosmos UI. They let the user know
  //   that, eg. a prop, is present and see the read-only stringified value.
  // - More importantly, because the fixture state controls which props to render.
  //   This way, if a prop is read-only and cannot be edited in the UI, it can
  //   still be removed.


  return {
    type: 'unserializable',
    stringifiedValue: stringifyUnserializableValue(value)
  };
}

function stringifyUnserializableValue(value) {
  // TODO: Enable custom stringifier plugins
  return (0, _reactIs.isElement)(value) ? (0, _reactElementToJsxString.default)(value) : String(value);
}