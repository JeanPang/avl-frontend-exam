"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areNodesEqual = areNodesEqual;

var _lodash = require("lodash");

var _getComponentName = require("./getComponentName");

var _isReactElement = require("./isReactElement");

function areNodesEqual(node1, node2, strictTypeCheck) {
  if ((0, _isReactElement.isReactElement)(node1) && (0, _isReactElement.isReactElement)(node2)) {
    return areElementsEqual(node1, node2, strictTypeCheck);
  }

  if (Array.isArray(node1) && Array.isArray(node2)) {
    return node1.every(function (node, nodeIndex) {
      return areNodesEqual(node, node2[nodeIndex], strictTypeCheck);
    });
  }

  return (0, _lodash.isEqual)(node1, node2);
}

function areElementsEqual(element1, element2, strictTypeCheck) {
  if (strictTypeCheck) {
    if (element1.type !== element2.type) {
      return false;
    }
  } else if ((0, _getComponentName.getComponentName)(element1.type) !== (0, _getComponentName.getComponentName)(element2.type)) {
    return false;
  } // Don't compare private element attrs like _owner and _store, which hold
  // internal details and have auto increment-type attrs


  return element1.key === element2.key && // @ts-ignore
  element1.ref === element2.ref && // Children (and props in general) can contain Elements and other Nodes
  areNodesEqual(element1.props, element2.props, strictTypeCheck);
}