"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSortedDecoratorsForFixturePath = getSortedDecoratorsForFixturePath;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getSortedDecoratorsForFixturePath(fixturePath, decoratorsByPath) {
  return getSortedDecorators(getDecoratorsForFixturePath(decoratorsByPath, fixturePath));
}

function getDecoratorsForFixturePath(decoratorsByPath, fixturePath) {
  return Object.keys(decoratorsByPath).filter(function (dPath) {
    return isParentDir(getParentPath(dPath), fixturePath);
  }).reduce(function (acc, dPath) {
    return _objectSpread({}, acc, _defineProperty({}, dPath, decoratorsByPath[dPath]));
  }, {});
}

function isParentDir(parentPath, filePath) {
  return parentPath === '' || filePath.indexOf("".concat(parentPath, "/")) === 0;
}

function getParentPath(nestedPath) {
  // Remove everything right of the right-most forward slash, or return an
  // empty string if path has no forward slash
  return nestedPath.replace(/^((.+)\/)?.+$/, '$2');
}

function getSortedDecorators(decoratorsByPath) {
  return sortPathsByDepthAsc(Object.keys(decoratorsByPath)).map(function (decoratorPath) {
    return decoratorsByPath[decoratorPath];
  });
}

function sortPathsByDepthAsc(paths) {
  return _toConsumableArray(paths).sort(function (a, b) {
    return getPathNestingLevel(a) - getPathNestingLevel(b) || a.localeCompare(b);
  });
}

function getPathNestingLevel(path) {
  return path.split('/').length;
}