"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectCosmosConfig = detectCosmosConfig;

var _path = _interopRequireDefault(require("path"));

var _cli = require("../shared/cli");

var _fs = require("../shared/fs");

var _createCosmosConfig = require("./createCosmosConfig");

var _getCosmosConfigAtPath = require("./getCosmosConfigAtPath");

var _shared = require("./shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function detectCosmosConfig() {
  var rootDir = detectRootDir();
  var cosmosConfigPath = detectCosmosConfigPath(rootDir);
  return (0, _fs.moduleExists)(cosmosConfigPath) ? (0, _getCosmosConfigAtPath.getCosmosConfigAtPath)(cosmosConfigPath) : (0, _createCosmosConfig.createCosmosConfig)(rootDir);
} // CLI support for --root-dir relative/path/project


function detectRootDir() {
  var cliArgs = (0, _cli.getCliArgs)();

  if (typeof cliArgs.rootDir !== 'string') {
    return (0, _shared.getCurrentDir)();
  }

  var absPath = _path.default.resolve((0, _shared.getCurrentDir)(), cliArgs.rootDir);

  if (!(0, _fs.dirExists)(absPath)) throw new Error("[Cosmos] Dir not found at path: ".concat(cliArgs.rootDir));
  return absPath;
} // CLI support for --config relative/path/to/cosmos.config.json


function detectCosmosConfigPath(rootDir) {
  var cliArgs = (0, _cli.getCliArgs)();

  if (typeof cliArgs.config !== 'string') {
    return _path.default.join(rootDir, 'cosmos.config.json');
  }

  if (_path.default.extname(cliArgs.config) !== '.json') throw new Error("[Cosmos] Invalid config file type: ".concat(cliArgs.config, " (must be .json)"));

  var absPath = _path.default.resolve(rootDir, cliArgs.config);

  if (!(0, _fs.fileExists)(absPath)) throw new Error("[Cosmos] Config not found at path: ".concat(cliArgs.config));
  return absPath;
}