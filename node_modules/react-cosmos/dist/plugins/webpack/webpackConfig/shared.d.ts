import webpack from 'webpack';
import { CosmosConfig } from '../../../config';
export declare function getUserWebpackConfig(cosmosConfig: CosmosConfig, userWebpack: typeof webpack): Promise<webpack.Configuration>;
export declare function getBaseWebpackConfig(cosmosConfig: CosmosConfig, userWebpack: typeof webpack): Promise<webpack.Configuration>;
export declare function resolveClientPath(relPath: string): string;
export declare function getUserDepsLoaderRule(): {
    loader: string;
    include: string;
};
export declare function resolveLocalReactDeps(cosmosConfig: CosmosConfig, baseWebpackConfig: webpack.Configuration): {
    alias: {
        react: string;
        'react-dom': string;
    };
    modules?: string[] | undefined;
    descriptionFiles?: string[] | undefined;
    mainFields?: string[] | string[][] | undefined;
    aliasFields?: string[] | string[][] | undefined;
    mainFiles?: string[] | undefined;
    extensions?: string[] | undefined;
    enforceExtension?: boolean | undefined;
    unsafeCache?: boolean | {} | undefined;
    cachePredicate?(data: {
        path: string;
        request: string;
    }): boolean;
    plugins?: webpack.ResolvePlugin[] | undefined;
    symlinks?: boolean | undefined;
    cacheWithContext?: boolean | undefined;
};
export declare function getGlobalsPlugin({ publicUrl }: CosmosConfig, userWebpack: typeof webpack, devServerOn: boolean): webpack.DefinePlugin;
export declare function hasPlugin(plugins: void | webpack.Plugin[], pluginName: string): boolean | void;
export declare function isInstanceOfPlugin(plugin: webpack.Plugin, constructorName: string): boolean;
export declare function getNodeEnv(): "production" | "development";
