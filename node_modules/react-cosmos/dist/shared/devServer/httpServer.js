"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHttpServer = createHttpServer;

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function createHttpServer(cosmosConfig, requestListener) {
  var port = cosmosConfig.port,
      hostname = cosmosConfig.hostname;

  var server = _http.default.createServer(requestListener);

  function start() {
    return _start.apply(this, arguments);
  }

  function _start() {
    _start = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      var hostnameDisplay;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return new Promise(function (resolve) {
                if (hostname === null) {
                  server.listen(port, resolve);
                } else {
                  server.listen(port, hostname, resolve);
                }
              });

            case 2:
              hostnameDisplay = hostname || 'localhost';
              console.log("[Cosmos] See you at http://".concat(hostnameDisplay, ":").concat(port));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _start.apply(this, arguments);
  }

  function stop() {
    return _stop.apply(this, arguments);
  }

  function _stop() {
    _stop = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return new Promise(function (resolve) {
                return server.close(resolve);
              });

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _stop.apply(this, arguments);
  }

  return {
    server: server,
    start: start,
    stop: stop
  };
}