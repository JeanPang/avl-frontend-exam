"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startDevServer = startDevServer;

var _config = require("../../config");

var _static = require("../static");

var _httpServer = require("./httpServer");

var _app = require("./app");

var _messageHandler = require("./messageHandler");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function startDevServer(_x) {
  return _startDevServer.apply(this, arguments);
}

function _startDevServer() {
  _startDevServer = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(platformType) {
    var plugins,
        cosmosConfig,
        app,
        pluginCleanupCallbacks,
        httpServer,
        msgHandler,
        cleanUp,
        _cleanUp,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        plugin,
        pluginReturn,
        _args2 = arguments;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _cleanUp = function _ref2() {
              _cleanUp = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return pluginCleanupCallbacks.map(function (cleanup) {
                          return cleanup();
                        });

                      case 2:
                        _context.next = 4;
                        return httpServer.stop();

                      case 4:
                        msgHandler.cleanUp();

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return _cleanUp.apply(this, arguments);
            };

            cleanUp = function _ref() {
              return _cleanUp.apply(this, arguments);
            };

            plugins = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];
            cosmosConfig = (0, _config.detectCosmosConfig)();
            app = (0, _app.createApp)(platformType, cosmosConfig);

            if (cosmosConfig.staticPath) {
              (0, _static.serveStaticDir)(app, cosmosConfig.staticPath, cosmosConfig.publicUrl);
            }

            pluginCleanupCallbacks = [];
            httpServer = (0, _httpServer.createHttpServer)(cosmosConfig, app);
            _context2.next = 10;
            return httpServer.start();

          case 10:
            msgHandler = (0, _messageHandler.createMessageHandler)(httpServer.server);
            _context2.prev = 11;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 15;
            _iterator = plugins[Symbol.iterator]();

          case 17:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context2.next = 26;
              break;
            }

            plugin = _step.value;
            _context2.next = 21;
            return plugin({
              cosmosConfig: cosmosConfig,
              httpServer: httpServer.server,
              expressApp: app,
              sendMessage: msgHandler.sendMessage
            });

          case 21:
            pluginReturn = _context2.sent;

            if (typeof pluginReturn === 'function') {
              pluginCleanupCallbacks.push(pluginReturn);
            }

          case 23:
            _iteratorNormalCompletion = true;
            _context2.next = 17;
            break;

          case 26:
            _context2.next = 32;
            break;

          case 28:
            _context2.prev = 28;
            _context2.t0 = _context2["catch"](15);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 32:
            _context2.prev = 32;
            _context2.prev = 33;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 35:
            _context2.prev = 35;

            if (!_didIteratorError) {
              _context2.next = 38;
              break;
            }

            throw _iteratorError;

          case 38:
            return _context2.finish(35);

          case 39:
            return _context2.finish(32);

          case 40:
            _context2.next = 46;
            break;

          case 42:
            _context2.prev = 42;
            _context2.t1 = _context2["catch"](11);
            cleanUp();
            throw _context2.t1;

          case 46:
            return _context2.abrupt("return", cleanUp);

          case 47:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[11, 42], [15, 28, 32, 40], [33,, 35, 39]]);
  }));
  return _startDevServer.apply(this, arguments);
}